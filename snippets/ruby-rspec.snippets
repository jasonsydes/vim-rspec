# This entire file from
# https://github.com/poorlilrichboy/snipmate-snippets/blob/master/snippets/ruby-rspec.snippets
#
# His version appears to be the most up to date at first glance.

snippet aft
	after(${1::each}) do
		${2}
	end
snippet annot
	any_number_of_times
snippet anr
	and_return(${1:value})
snippet anra
	and_raise(${1:exception})
snippet anrb
	and_return { ${1} }
snippet ant
	and_throw(${1:sym})
snippet any
	and_yield(${1:values})
snippet atl
	at_least(${1:n}).times
snippet atm
	at_most(${1:n}).times
snippet bef
	before(${1::each}) do
		${2}
	end
snippet cap
	"([^\"]*)"
snippet conn
	controller_name :${1:controller}
snippet con
	context "${1}" do
	  ${2}
	end
snippet des
	describe ${1:subject} do
		${2}
	end
snippet desc
	require File.expand_path('spec/spec_helper')
	
	describe ${1:`Snippet_RubyClassNameFromFilename()`} do
		${2}
	end
snippet desrc
	describe ${1:controller}, "${2:GET|POST|PUT|DELETE} ${3:/some/path}${4}" do
		${5}
	end
snippet dest
	describe ${1:Type} do
		${2}
	end
snippet dests
	describe ${1:Type}, "${2:description}" do
		${3}
	end
snippet ex
	exactly(${1:n}).times
snippet Given
	Given /^${1:something} ${2:"([^\"]*)"}$/ do |${3:arg1}|
	  ${4:pending}
	end
snippet isbl
	it_should_behave_like '${1:do something}'
snippet it
	it "${1}" do
		${2}
	end
snippet itb
	it { ${1} }
snippet its
	it "should ${1:work correctly}" do${2}
snippet let
	let(:${1:subject}) { ${2:value} }
snippet mat
	class ${1:ReverseTo}
		def initialize(${2:param})
			@$2 = $2
		end
	
		def matches?(actual)
			@actual = actual
			# Satisfy expectation here. Return false or raise an error if it's not met.
			${3:@actual.reverse.should == @$2}
			true
		end
	
		def failure_message
			"expected #{@actual.inspect} to ${4} #{@$2.inspect}, but it didn't"
		end
	
		def negative_failure_message
			"expected #{@actual.inspect} not to ${5} #{@$2.inspect}, but it did"
		end
	end
	
	def ${6:reverse_to}(${7:expected})
		${8}.new($7)
	end
snippet mm
	mock_model(${1:model})${2}
snippet moc
	${1:var} = mock("${2:mock_name}"${3:, :null_object => true})
	${4}
snippet mocw
	Spec::Runner.configure do |config|
		config.mock_with :${1:mocha|flexmock|rr}
	end
snippet on
	once
snippet resh
	require File.dirname(__FILE__) + '/../spec_helper'
snippet sef
	shared_examples_for "${1:do something}" do
	  ${2}
	end
# Shoulds
snippet sh Should ==
	should == ${1:value}
snippet sh Should be
	should be ${1:comparison} ${2:value}
snippet sh Should be predicate?
	should be_${1:predicate}
snippet sh Should be within
	should be_within(${1:delta}).of(${2:value})${3}
snippet sh Should match
	should match(/${1:regexp}/)${2}
snippet sh Should include
	should include(${1:value(s)})${2}
snippet sh Should have n items
	should have(${1:num}).${2:items}
snippet sh Should have at least n items
	should have_at_least(${1:num}).${2:items}
snippet sh Should have at most n items
	should have_at_most(${1:num}).${2:items}
snippet sh Should cover
	should cover(${1:value(s)})${2}
snippet sh Should be an instance of
	should be_an_instance_of(${1:class}){$2}
snippet sh Should be a kind of
	should be_a_kind_of(${1:class}){$2}
snippet sh Should be true
	should be_true${1}
snippet sh Should be false
	should be_false${1}
snippet sh Should be nil
	should be_nil${1}
snippet sh Should eql (object equivalence without type conversions)
	should eql(${1:value})${2}
snippet sh Should equal (object identity)
	should equal(${1:value})${2}
snippet sh Should raise error
	expect { ${1:method call} }.to raise_error(${2:Error class}, ${3:message string})${4}
# Should nots
snippet shn Should not ==
	should_not == ${1:value}
snippet shn Should not be
	should_not be ${1:comparison} ${2:value}
snippet shn Should not be predicate?
	should_not be_${1:predicate}
snippet shn Should not be within
	should_not be_within(${1:delta}).of(${2:value})${3}
snippet shn Should not match
	should_not match(/${1:regexp}/)${2}
snippet shn Should not include
	should_not include(${1:value(s)})${2}
snippet shn Should not have n items
	should_not have(${1:num}).${2:items}
snippet shn Should not cover
	should_not cover(${1:value(s)})${2}
snippet shn Should not be an instance of
	should_not be_an_instance_of(${1:class}){$2}
snippet shn Should not be a kind of
	should_not be_a_kind_of(${1:class}){$2}
snippet shn Should not be true
	should_not be_true${1}
snippet shn Should not be false
	should_not be_false${1}
snippet shn Should not be nil
	should_not be_nil${1}
snippet shn Should not eql (object equivalence without type conversions)
	should_not eql(${1:value})${2}
snippet shn Should not equal (object identity)
	should_not equal(${1:value})${2}
snippet shn Should not raise error
	expect { ${1:method call} }.to_not raise_error(${2:Error class}, ${3:message string})${4}
snippet st
	stub!(:${1}).and_return(${2})
snippet sub
	subject { ${1:value} }${2}
snippet Then
	Then /^${1:something} ${2:"([^\"]*)"}$/ do |${3:arg1}|
	  ${4:pending}
	end
snippet tw
	twice
snippet When
	When /^${1:something} ${2:"([^\"]*)"}$/ do |${3:arg1}|
	  ${4:pending}
	end
snippet wia
	with(${1:args})
	${2}
